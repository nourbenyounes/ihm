trigger:
  branches:
    include:
      - main

pool:
  name: 'Default'
  demands:
    - agent.name -equals AgentSelfHosted

variables:
  system.debug: true
  containerRegistry: 'registry0'
  imageRepository: 'nouuur1/projetweb'

stages:
- stage: BuildAndTest
  displayName: Build and Test
  jobs:
  - job: BuildAndTest
    displayName: Build and Test Application
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'  # Node.js 18 or higher
      displayName: 'Install Node.js'

    - script: |
        node -v
        npm -v
      displayName: 'Verify Node.js and npm Versions'

    - script: |
        npm install -g @angular/cli
      displayName: 'Install Angular CLI'

    - script: |
        cd app  
        npm install --frozen-lockfile
        npm run build --prod
      displayName: 'Build Frontend'

    - script: |
        cd app  
        ng test --watch=false --browsers=ChromeHeadless 
      displayName: 'Run Tests'


- stage: DockerBuildAndPush
  displayName: Docker Build and Push
  dependsOn: BuildAndTest  
  jobs:
  - job: DockerBuildAndPush
    displayName: Build and Push Docker Image
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: registry0  
        repository: $(imageRepository)  
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'  
        tags: '$(Build.BuildId)' 
      displayName: 'Build and Push Docker Image'
    
- stage: DockerDeployToDesktop
  displayName: Deploy Docker Image
  dependsOn: DockerBuildAndPush
  jobs:
  - job: DockerDeployToDesktop
    displayName: Deploy Docker Image 
    steps:
    - script: |
        REM Ensure no container is using port 8080
        FOR /F "tokens=*" %%i IN ('docker ps -q --filter "publish=8080"') DO (
            echo Stopping and removing container %%i
            docker stop %%i
            docker rm %%i
        )
        
        REM Check if port 8080 is still in use by a process
        FOR /F "tokens=3" %%i IN ('netstat -aon ^| findstr :8080') DO (
            echo Port 8080 is being used by process with PID %%i
            echo Killing process with PID %%i
            taskkill /F /PID %%i
        )

        REM Retry logic to check if port 8080 is still free
        SET retries=0
        :retry
        FOR /F "tokens=3" %%i IN ('netstat -aon ^| findstr :8080') DO (
            echo Port 8080 is still occupied. Retrying...
            SET /A retries+=1
            IF %retries% GEQ 5 (
                echo Port 8080 is still occupied after 5 attempts. Exiting.
                exit /b 1
            )
            timeout /t 5 /nobreak
            GOTO retry
        )

        REM Deploy new Docker container       
        docker pull docker.io/$(imageRepository):$(Build.BuildId)

        REM Make sure port 8080 is free before starting the container
        FOR /F "tokens=3" %%i IN ('netstat -aon ^| findstr :8080') DO (
            echo Port 8080 is still occupied by process %%i. Exiting.
            exit /b 1
        )

        REM Optionally use a different port (8084 in this case)
        docker run -d -p 8084:80 docker.io/$(imageRepository):$(Build.BuildId)
      displayName: 'Deploy Docker Image '

- stage: Monitoring
  displayName: Monitoring with Prometheus and Grafana
  jobs:
  - job: MonitoringSetup
    displayName: Setup Prometheus and Grafana Containers
    steps:
    - script: |
        docker stop prometheus
        docker rm prometheus
        docker stop grafana
        docker rm grafana
        # Run Prometheus container
        docker run -d --name prometheus -p 9090:9090 prom/prometheus
        # Run Grafana container
        docker run -d --name grafana -p 3000:3000 grafana/grafana
      displayName: 'Run Prometheus and Grafana Containers'
    - script: |
        docker exec -it grafana curl -X POST -H 'Content-Type: application/json' -d '{ "name": "Prometheus", "type": "prometheus", "url": "http://prometheus:9090", "access": "proxy" }' http://admin:admin@localhost:3000/api/datasources/
      displayName: 'Configure Grafana Data Source '