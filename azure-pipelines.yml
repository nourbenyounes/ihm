trigger:
  branches:
    include:
      - main

pool:
  name: 'Default'
  demands:
    - agent.name -equals AgentSelfHosted

variables:
  system.debug: true
  containerRegistry: 'registry0'
  imageRepository: 'nouuur1/projetweb'

stages:
- stage: BuildAndTest
  displayName: Build and Test
  jobs:
  - job: BuildAndTest
    displayName: Build and Test Application
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'  # Node.js 18 or higher
      displayName: 'Install Node.js'

    - script: |
        node -v
        npm -v
      displayName: 'Verify Node.js and npm Versions'

    - script: |
        npm install -g @angular/cli
      displayName: 'Install Angular CLI'

    - script: |
        cd app  
        npm install --frozen-lockfile
        npm run build --prod
      displayName: 'Build Frontend'

    - script: |
        cd app  
        ng test --watch=false --browsers=ChromeHeadless 
      displayName: 'Run Tests'


- stage: DockerBuildAndPush
  displayName: Docker Build and Push
  dependsOn: BuildAndTest  
  jobs:
  - job: DockerBuildAndPush
    displayName: Build and Push Docker Image
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: registry0  
        repository: $(imageRepository)  
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'  
        tags: '$(Build.BuildId)' 
      displayName: 'Build and Push Docker Image'
    
- stage: DockerDeployToDesktop
  displayName: Deploy Docker Image
  dependsOn: DockerBuildAndPush
  jobs:
  - job: DockerDeployToDesktop
    displayName: Deploy Docker Image 
    steps:
    - script: |
        REM Ensure no container is using port 8080
        FOR /F "tokens=*" %%i IN ('docker ps -q --filter "publish=8080"') DO (
            echo Stopping and removing container %%i
            docker stop %%i
            docker rm %%i
        )

        REM Deploy new Docker container       
        docker pull docker.io/$(imageRepository):$(Build.BuildId)

        docker run -d -p 8080:80 docker.io/$(imageRepository):$(Build.BuildId)
      displayName: 'Deploy Docker Image '
- stage: Monitoring
  displayName: Monitoring with Prometheus and Grafana
  dependsOn: DockerDeployToDesktop
  jobs:
  - job: MonitoringSetup
    displayName: Setup Prometheus and Grafana Containers
    steps:
    - script: |
        # Run Prometheus container
        docker run -d --name prometheus -p 9090:9090 prom/prometheus
        # Run Grafana container
        docker run -d --name grafana -p 3000:3000 grafana/grafana
      displayName: 'Run Prometheus and Grafana Containers'

    - script: |
        # Configure Grafana to connect to Prometheus
        docker exec -it grafana /bin/bash -c \
        "curl -X POST -H 'Content-Type: application/json' -d '{
          \"name\": \"Prometheus\",
          \"type\": \"prometheus\",
          \"url\": \"http://prometheus:9090\",
          \"access\": \"proxy\"
        }' http://admin:admin@localhost:3000/api/datasources/"
      displayName: 'Configure Grafana Data Source'